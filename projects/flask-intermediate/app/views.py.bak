from flask import Blueprint, jsonify, request
from flask_jwt_extended import (
    create_access_token,
    create_refresh_token,
    jwt_required,
    get_jwt_identity
)
from .models import CustomUser, db

user_blueprint = Blueprint('user', __name__)

@user_blueprint.route('/register/', methods=['POST'])
def register_user():
    """Register a new user."""
    data = request.json
    username = data.get('username')
    password = data.get('password')

    if not username or not password:
        return jsonify({"detail": "Username and password required"}), 400

    if CustomUser.query.filter_by(username=username).first():
        return jsonify({"detail": "User already exists"}), 400

    new_user = CustomUser(username=username)
    new_user.set_password(password)
    db.session.add(new_user)
    db.session.commit()
    return jsonify({"detail": "User created successfully"}), 201

@user_blueprint.route('/token/', methods=['POST'])
def login():
    """Authenticate user and return access and refresh tokens."""
    data = request.get_json()
    if not data or 'username' not in data or 'password' not in data:
        return jsonify({"detail": "Invalid username or password"}), 401

    username = data['username']
    password = data['password']

    user = CustomUser.query.filter_by(username=username).first()
    if not user or not user.check_password(password):
        return jsonify({"detail": "Invalid username or password"}), 401

    access_token = create_access_token(identity=user.id)
    refresh_token = create_refresh_token(identity=user.id)

    return jsonify({"access": access_token, "refresh": refresh_token}), 200

@user_blueprint.route('/list/', methods=['GET'])
@jwt_required()
def list_users():
    """Return list of all users, requires valid JWT access token."""
    users = CustomUser.query.all()
    users_data = [{"id": u.id, "username": u.username} for u in users]
    return jsonify(users_data), 200
